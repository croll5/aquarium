/*
Copyright ou ¬© ou Copr. C√©cile Rolland, (21 janvier 2025) 

aquarium[@]mailo[.]com

Ce logiciel est un programme informatique servant √† l'analyse des collectes
tra√ßologiques effectu√©es avec le logiciel DFIR-ORC. 

Ce logiciel est r√©gi par la licence CeCILL soumise au droit fran√ßais et
respectant les principes de diffusion des logiciels libres. Vous pouvez
utiliser, modifier et/ou redistribuer ce programme sous les conditions
de la licence CeCILL telle que diffus√©e par le CEA, le CNRS et l'INRIA 
sur le site "http://www.cecill.info".

En contrepartie de l'accessibilit√© au code source et des droits de copie,
de modification et de redistribution accord√©s par cette licence, il n'est
offert aux utilisateurs qu'une garantie limit√©e.  Pour les m√™mes raisons,
seule une responsabilit√© restreinte p√®se sur l'auteur du programme,  le
titulaire des droits patrimoniaux et les conc√©dants successifs.

A cet √©gard  l'attention de l'utilisateur est attir√©e sur les risques
associ√©s au chargement,  √† l'utilisation,  √† la modification et/ou au
d√©veloppement et √† la reproduction du logiciel par l'utilisateur √©tant 
donn√© sa sp√©cificit√© de logiciel libre, qui peut le rendre complexe √† 
manipuler et qui le r√©serve donc √† des d√©veloppeurs et des professionnels
avertis poss√©dant  des  connaissances  informatiques approfondies.  Les
utilisateurs sont donc invit√©s √† charger  et  tester  l'ad√©quation  du
logiciel √† leurs besoins dans des conditions permettant d'assurer la
s√©curit√© de leurs syst√®mes et ou de leurs donn√©es et, plus g√©n√©ralement, 
√† l'utiliser et l'exploiter dans les m√™mes conditions de s√©curit√©. 

Le fait que vous puissiez acc√©der √† cet en-t√™te signifie que vous avez 
pris connaissance de la licence CeCILL, et que vous en avez accept√© les
termes.
*/

construireArborescence("arborescence", []);

/** Fonction permettant d'afficher le contenu d'un dossier
 * 
 * @param {*} id_racine identifiant du dossier duquel on veut afficher le contenu
 * @param {*} chemin_num chemin dans l'arborescence (json) sur laquelle on se base
 * @returns 
 */
function construireArborescence(id_racine, chemin_num){
    // On r√©cup√®re un pointeur vers le dossier duquel on veut afficher le contenu
    let racine = document.getElementById(id_racine);
    // Si le dossier a d√©j√† un contenu, inutile d'en r√©-extraire le contenu. On s'arr√™te l√†
    if(racine == undefined || racine.children.length > 1){
        return
    }
    try {
        // On indique √† l'utilisateur qu'il faut patienter
        document.body.style.cursor = "wait"; 
    } catch (error) {
    }
    // On interroge une fonction go qui renvoie une liste contenant les m√©tadonn√©es des fichiers 
    // et dossiers contenus dans le dossier concern√©
    parent.window.go.main.App.ArborescenceMachineAnalysee(chemin_num).then(resultat =>{ 
        // Si l'on a aucun r√©sultat, cela signifie que l'arborescence n'a pas encore √©t√© extraite. 
        // On affiche donc un menu permettant √† l'utilisateur de lancer l'extraction
        if(resultat.length == 0){
            document.getElementById("extraction_arborescence").style.display = "inline";
            document.getElementById("patientez").style.display = "none";
            return
        }
        // On cherche de quels indicateurs de l√©gitimit√© l'utilisateur demande l'affichage
        let afficher_inconnu, afficher_ok, afficher_suspect;
        try{
            afficher_inconnu = document.getElementById("affiche_inconnu").checked;
            afficher_ok = document.getElementById("affiche_ok").checked;
            afficher_suspect = document.getElementById("affiche_suspect").checked;
        }catch(error){
            // Par d√©fault s'il y a une erreur, on affiche tout
            alert(document.getElementById("affiche_inconnu"));
            afficher_inconnu = true;
            afficher_ok = true;
            afficher_suspect = true;
        }
        // On ajoute les fichiers et dossiers contenus dans le dossier concern√©
        for(let i=0; i < resultat.length; i++){
            // Si le fichier a des enfants, on l'affiche comme un dossier
            if(resultat[i]["ADesEnfants"]){
                let enfant = document.createElement("details");
                enfant.id = String.prototype.concat(id_racine, "_", i);
                enfant.className = "dossier_arborescence";
                let chemin_enfant = chemin_num.concat([i]);
                // L'√©l√©ment titre_enfant contient le nom du dossier
                let titre_enfant = document.createElement("summary");
                titre_enfant.textContent = resultat[i]["Nom"];
                // Lorsque l'on cliquera sur ce dossier, ses enfants seront affich√©s gr√¢ce √† cette m√™me fonction
                titre_enfant.onclick = function(ev){return construireArborescence(enfant.id, chemin_enfant)};
                enfant.appendChild(titre_enfant);
                // On ajoute le sous-dossier dans le dossier
                racine.appendChild(enfant);
            }else{
                // Sinon, il s'agit d'un fichier
                let enfant = document.createElement("p");
                // On affiche la l√©gitimit√© (si le fichier est pr√©sent dans le mod√®le)
                let legitimite = document.createElement("strong");
                legitimite.textContent = "üòá";
                legitimite.className = "legitimite_ok";
                legitimite.style.display = afficher_ok ? "inline" : "none";
                if(resultat[i]["EnfantsSuspects"] > 0){
                    // Si le fichier a une empreinte diff√©rente de celle dans le mod√®le
                    legitimite.textContent = "ü•¥";
                    legitimite.className = "legitimite_suspect";
                    legitimite.style.display = afficher_suspect ? "inline" : "none";
                }else if(resultat[i]["EnfantsInconnus"] > 0){
                    // Si le fichier n'existe pas dans le mod√®le
                    legitimite.textContent = "üòµ";
                    legitimite.className = "legitimite_aucune";
                    legitimite.style.display = afficher_inconnu ? "inline" : "none";
                }
                enfant.id = String.prototype.concat(id_racine, "_", i);
                enfant.className = "fichier_arborescence";
                // On ajoute le nom du fichier
                enfant.textContent = resultat[i]["Nom"];
                enfant.appendChild(legitimite);
                // On ajoute le fichier dans le dossier
                racine.appendChild(enfant);
            }
        }
        // On remet le curseur standard pour indiquer que les calculs sont achev√©s
        document.body.style.cursor = "default"; 
        // On affiche l'arborescence et sa l√©gende
        document.getElementById("affichage_arbo").style.display = "inline";
    })
    
}
/** Fonction permettant d'extraire l'arborescence d'un ORC en faisant 
 *  appel √† la fonction Go ExtraireArborescence
 */
function extraire_arborescence(){
    // On masque le menu permettant d'extraire l'arborescence
    document.getElementById("extraction_arborescence").style.display = "none";
    // On affiche la ligne demandant de patienter
    document.getElementById("patientez").style.display = "inline";
    // On regarde si l'arborescence doit √™tre extraite avec un mod√®le
    let avec_modele = document.getElementById("avec_modele").checked;
    parent.window.go.main.App.ExtraireArborescence(avec_modele).then(resultat =>{
        // On fois que l'arborescence a √©t√© extraite, on l'affiche
        document.getElementById("patientez").style.display = "none";
        construireArborescence("arborescence", []);
    })
}

/** Fonction permettant d'afficher ou de masquer les indicateurs de l√©gitimit√©
 * demand√©s par l'utilisateur
 * Cette fonction se d√©clenche lorsque l'utilisateur coche ou d√©coche une case de la secion "l√©gende"
 * @param {*} id_checkbox : l'identifiant de la "checkbox" que l'utilisateur a chang√©e
 * @param {*} nom_classe : non de la classe des √©l√©ments √† afficher ou masquer 
 * (par exemple "legitimite_aucune" pour les fichiers n'√©tant pas pr√©sents dans le mod√®le)
 */
function affichage_legitimite(id_checkbox, nom_classe){
    let choix = document.getElementById(id_checkbox);
    // On r√©cup√®re la liste des indicateurs
    let smileys = document.getElementsByClassName(nom_classe);
    // On regarde si la case a √©t√© coch√©e ou d√©coch√©e
    if (choix.checked){
        for(const element of smileys){
            // Si elle a √©t√© coch√©e, on affiche les indicateurs
            element.style.display = "inline";
        }
    } else{
        for(const element of smileys){
            // Si elle a √©t√© d√©coch√©e, on masque les indicateurs
            element.style.display = "none";
        }
    }
}